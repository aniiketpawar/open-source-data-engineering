# docker-compose.yml

services:
  postgres_airflow:
    image: postgres:13
    container_name: postgres_airflow
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    networks:
      - data_platform_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres_superset:
    image: postgres:13
    container_name: postgres_superset
    environment:
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - POSTGRES_DB=superset
    volumes:
      - postgres_superset_data:/var/lib/postgresql/data
    networks:
      - data_platform_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "superset"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow-webserver:
    build: .
    container_name: airflow_webserver
    ports:
      - "8080:8080"
    depends_on:
      postgres_airflow:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./spark-data:/opt/spark-data
      - ./spark-apps:/opt/spark-apps
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW_UID=50000
    networks:
      - data_platform_network
    command: bash -c "airflow db init && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin && airflow webserver"

  airflow-scheduler:
    build: .
    container_name: airflow_scheduler
    depends_on:
      postgres_airflow:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./spark-data:/opt/spark-data
      - ./spark-apps:/opt/spark-apps
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW_UID=50000
    networks:
      - data_platform_network
    command: scheduler

  spark-master:
    image: bitnami/spark:3.5
    container_name: spark_master
    user: root
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
    environment:
      - SPARK_MODE=master
    networks:
      - data_platform_network

  spark-worker:
    image: bitnami/spark:3.5
    container_name: spark_worker
    user: root
    depends_on:
      - spark-master
    volumes:
      - ./spark-apps:/opt/spark-apps
      - ./spark-data:/opt/spark-data
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
    networks:
      - data_platform_network

  minio:
    image: minio/minio:latest
    container_name: minio_s3
    command: server /data --console-address ":9001"
    ports:
      - "9002:9000"
      - "9003:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - data_platform_network

  mc:
    image: minio/mc
    container_name: minio_client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 admin password;
      /usr/bin/mc mb myminio/datalake;
      /usr/bin/mc policy set public myminio/datalake;
      exit 0;
      "
    networks:
      - data_platform_network

  superset:
    build: ./superset
    container_name: superset_bi
    depends_on:
      postgres_superset:
        condition: service_healthy
    ports:
      - "8089:8088"
    environment:
      - SUPERSET_SECRET_KEY=your_strong_secret_key
      - SUPERSET_CONFIG_PATH=/app/pythonpath/superset_config.py
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - POSTGRES_DB=superset
      - POSTGRES_HOST=postgres_superset
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_S3_ENDPOINT=http://minio:9000
    volumes:
      - ./superset/superset_config.py:/app/pythonpath/superset_config.py
      - superset_data:/app/superset_home
    networks:
      - data_platform_network
    command: >
      bash -c "
        if [ ! -f /app/superset_home/initialized.lock ]; then
          echo 'Running Superset initialization...' &&
          superset fab create-admin --username admin --firstname Superset --lastname Admin --email admin@superset.com --password admin &&
          superset db upgrade &&
          superset init &&
          touch /app/superset_home/initialized.lock &&
          echo 'Initialization complete.'
        fi;
        echo 'Starting Superset web server...' &&
        superset run -p 8088 -h 0.0.0.0 --with-threads --reload --debugger
      "

volumes:
  postgres_airflow_data:
  postgres_superset_data:
  minio_data:
  superset_data:

networks:
  data_platform_network:
    driver: bridge
